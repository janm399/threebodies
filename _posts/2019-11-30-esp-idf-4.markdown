---
layout: post
title:  "ESP-IDF 4：使用RMT来实现2812驱动程序"
date:   2019-11-25 18:00:00 +0000
categories: [HW, SW]
excerpt: "本帖子中我们来谈一谈如何利用ESP32中RMT模块以控制2812LED元件。除非节拍，红外遥控的协议跟2812一样。二者使用的信号有两个根本部分：复位，接下来数据。只要把节拍调整好，就可以依靠RMT来控制2812。"
---
使用GPIO非常不好用，而且依靠仔细数的`nop`命令为了实现延时精确一段时间一点也不稳定。其他任务、其他编译器的选择、其他芯片版，其实任何好像无足轻重的细节可能会影响该忙碌循环。怎么办?——ESP32基本上是个硬件元件，它一定包括支持这么简单协议的内部电路。

# 红外遥控协议
我们开始谈如何使用RMT来实现2812驱动程序，我们应该知道RMT根本上是为了实现依靠遥控协议的系统。那么，这不是说明每一个遥控使用一样的协议，也不是说明2812基本上是利用遥控协议的元件。不过这两个好像完全不一样的应用可能有一样基础的原理。

<!--
{signal: [
  ['独立信号',
   {name:'复位', wave: 'xH..|..L|.x'},
   {             node: ' A     B  C'},
   {name:'1',    wave: 'xHLxx|'},
   {             node: ' DEF'},

   {name:'0',    wave: 'xHL.x|'},
   {             node: ' GH I'},
  ],
  {},
  {},
  ['信号',
   {name: '元素', wave: 'x23456789xx', data:'b0 b1 b2 b3 b4 b5 b6 b7'},
   {              node: ' J       K'},
   {},
   {name: '命令', wave: 'x3.|6589xxx', data: ['复位', '用户吗', '～用户吗', '数据吗', '～数据吗']},
   {              node: ' L  M   N'}
  ]
], 
   edge: [
   'A<->B 9000 µs', 'B<->C 4500 µs',
   'D<->E 560 µs', 'E<->F 560 µs',
   'G<->H 560 µs', 'H<->I 1685 µs',
   'J<->K xx µs',
   'L<->M 13.5 ms', 'M<->N ~53.4 ms'
  ],
  config: { hscale: 2 }
}
35920
17920
-->

为了发现是否是这样，首先我们来检查一般红外遥控发射机。

![](/assets/2019-12-01-esp-idf-4/rc.jpg)
![](/assets/2019-12-01-esp-idf-4/ir.svg)

不管发射的信号细节如何，从上面图可以看出除非节拍，根本原理像2812一样。像2812一样，红外遥控信号也包含两个基本信号：复位，接下来数据。只要把节拍调整好，就可以依靠RMT来控制2812。

# 利用RMT以现实2812协议
使用RMT的代码包含两个基础概念：第一个是RMT端口的设置函数和结构体，第二个是把信号变换和传输函数和结构体。如下面源码所示，把RMT端口设置后，只剩下把我们已使用的`rgb_t`结构体变化成传送的函数的参数类型。

## 接口设计
最初接口设计可能随着已实现的两个函数，即类似于“起始/启动”的函数与“传送数据/颜色”的函数。

{% highlight c++ linenos %}
void ws2812_rmt_init(const gpio_num_t gpio);
void ws2812_rmt_set(const rgb_t *pixels, const uint count);
{% endhighlight %}

从其两个函数的参数类型、从它的返回类型可以所推理的是虽然`ws2812_rmt_init`**好像**支持几个输出，但`ws2812_rmt_set`无法从它的参数知道该控制哪一个输出。其实，由于ESP32中的RMT结构，二者函数的参数对设置好ESP32中的RMT模块不够，更仔细地探索RMT接口我们会发现还需要加上`rmt_channel_t`和`mem_block_num`参数，如下面源码所示。

{% highlight c++ linenos %}
void ws2812_rmt_init(const gpio_num_t gpio,
  const rmt_channel_t channel = RMT_CHANNEL_0,
  const uint8_t mem_block_num = 1);
void ws2812_rmt_set(const rgb_t *pixels,
  const uint count,
  const rmt_channel_t channel = RMT_CHANNEL_0);
{% endhighlight %}

为了提供最方便的接口设计，新加上的参数提供默认值，即`rmt_channel_t channel = RMT_CHANNEL_0`和`uint8_t mem_block_num = 1`；这样，在最简单情况下不需要改变调用其两个函数的代码。

{% highlight c++ linenos %}
ws2812_rmt_init(LED_STRIP_GPIO);
rgb_t[8] pixels;
...
ws2812_rmt_set(pixels, 8);
{% endhighlight %}

## ws2812_rmt实现
一开始我们应该再回想下帖子中的2812协议图：重点是则复位信号是$$50μs$$长的低电平信号，则颜色信号是24个“1”或者“1”信号。

![2812数据传输1](/assets/2019-11-25-esp-idf-3/led-1.svg)
![2812数据传输2](/assets/2019-11-25-esp-idf-3/led-n.svg)

本来我们靠`nop`的执行时间与时钟源的频率；回想我们算法：每一个时钟同期要$$1/240MHz = 4.16ns$$；因此，已实现延时$$125ns$$的函数，我们需要调用30个`nop`机器指令即可。最终我们成功了，可是我们最好再仔细地检查信号的时间分布。如下面视频所示，此依靠几个`nop`指令不仅仅太认真的，而且并不适合FreeRTOS中scheduler。

<div class="myvideo">
   <video  style="display:block; width:100%; height:auto;" controls loop="false">
       <source src="{{ site.baseurl }}/assets/2019-12-01-esp-idf-4/naive.mp4" type="video/mp4" />
   </video>
</div>

请注意信号传送的时间不稳定，不仅仅延时函数现实地不太确切，而且如此实现延时功能真的是习气。最好靠ESP32中的专用元件，即RMT。RMT也必须要跟着某个时钟源，不仅如此也必须靠某个管理时间的模块。区别来自于他的实现细节，尤其它不仅仅依靠独立时钟源，而且它的传送是靠硬件的。所以，虽然我们还需要算一算一些参数，但算好后RMT模块会自我管理数据传输的过程。

为了算好RMT的参数只需要知道RMT时钟源的频率，即$$80MHz$$；这使时钟同期$$f=80MHz \Rightarrow T=12.5ns$$，从而延时$$125ns$$和$$1000ns$$的时间，分别要设置10个和80个时钟同期。

{% highlight c++ linenos %}
void ws2812_rmt_init(const gpio_num_t gpio,
                     const rmt_channel_t channel,
                     const uint8_t mem_block_num) {
  rmt_config_t config;
  config.rmt_mode = RMT_MODE_TX;

  config.channel = channel;
  config.gpio_num = gpio;
  config.mem_block_num = mem_block_num;
  config.clk_div = 1;

  config.tx_config.loop_en = false;
  config.tx_config.carrier_en = false;
  config.tx_config.idle_output_en = true;
  config.tx_config.idle_level = RMT_IDLE_LEVEL_LOW;

  rmt_config(&config);
  rmt_driver_install(config.channel, 0, 0);
}
{% endhighlight %}

上面的源码定义（为了设置RMT所需的）`rmt_config_t`结构体的字段中最重要是`channel`、`gpio_num`、`mem_block_num`、`clk_div`，其他字段应该是简单地了解的。ESP32提供7个独立RMT channels，每一个RMT channel都可以采用不一样的参数，当然需要采用不一样的输出、不一样的`mem_block_num`。最后一个参数——`clk_div`——定义如何从RMT时钟源来取得RMT channel的时钟源，RMT channel的时钟源频率相当$$80MHz/clk\_div$$，也就是说定义最短一段时间被其RMT channel支持的。我们使用的`clk_div = 1`所定义是其RMT channel的时钟源相当RMT时钟源，因此最短一段时间等于$$12.5ns$$。我们终于可以实现传送跟着2812的协议的代码，该代码只需要构建合适`rmt_item32_t`对象，然后调用`rmt_write_items`即可。`rmt_item32_t`结构体所设置是如何把输入参数变换成传送的信号，该结构体包含四个字段：`duration0`、`level0`、`duration1`、`level1`，如下面图所示。

<!--
{signal: [
  {name: '时钟源', wave: 'p.|....|......'},
  {},
  {name: '"0"',  wave: 'd1.0........dd', data:['level0', 'level1']},
  {               node: ' A B        C'},
  {},
  {name: '"1"',  wave: 'd1........0.dd', data:['level0', 'level1']},
  {               node: ' E        F G'},
  {},
  ],
  edge: ['A<~>B duration0', 'B<->C duration1', 'E<->F duration 0', 'F<->G duration1']
}
-->
![2812数据传输2](/assets/2019-12-01-esp-idf-4/rmt_item32_t.svg)

随着`clk_div`值可以计算`duration0`和`duration1`分别应该是`10`与`80`；即10个与80个时钟源脉冲，在时间定义域分别是$$125ns$$与$$1000ns$$。当然还剩下考虑复位信号的参数，随着一样的算法可以看出复位信号中的`duration0`和`duration1`二者应该是$$50000ns / 12.5 / 2 = 2000$$。（请注意：每一个`rmt_item32_t`所定义是两个脉冲，然而二者`duration`参数必须大于0；因此我们最好把复位信号除以2，而设定二者`level`等于0。）

{% highlight c++ linenos %}
const uint32_t ds = 10;
const uint32_t dl = 80;
const uint32_t rs = 2000;
const rmt_item32_t reset = {rs, 0, rs, 0};
const rmt_item32_t bit0  = {ds, 1, dl, 0};
const rmt_item32_t bit1  = {dl, 1, ds, 0};
{% endhighlight %}

现在我们有所有的细节为了实现`ws2812_rmt_set`函数，该函数负责两个任务：则把`rgb_t`变换成`rmt_item32_t`，则把刚刚变换的结构体传送RMT接口，如下面的图所示。

![2812数据传输2](/assets/2019-12-01-esp-idf-4/rmt_conv.png)

现在我们已发现了所有所需的细节，最重要的是`rmt_items32_t`组有`count * 24 + 1`个元素，一个复位元素、 接下来`count * 24`个定义每一个像素中所需$$8b$$的三个颜色值的元素。因为我们打算写的代码依靠指针、指针算数，我们最好首先探索好其指针算数的原理。

![2812数据传输2](/assets/2019-12-01-esp-idf-4/rmt_conv_ptr.png)

随着上面图中的概念，只需要把它翻译成C++代码，当然我们还需要去实现其`colour_to_rmts`：像素的颜色`uint8_t`值变换的函数，如下面源码所示。

{% highlight c++ linenos %}
void colour_to_rmts(const uint8_t colour, rmt_item32_t *items) {
  for (int i = 7; i >= 0; i--, items++) {
    if (colour & (1 << i)) *items = bit1; else *items = bit0;
  }
}

void ws2812_rmt_set(const rgb_t *pixels,
                    const uint count,
                    const rmt_channel_t channel) {
  const uint rmt_items_size = count * 24 + 1;
  rmt_item32_t rmt_items[rmt_items_size];
  rmt_item32_t *rmt_items_head = rmt_items;
  *rmt_items_head++ = reset;
  for (uint i = 0; i < count; i++, rmt_items_head += 24) {
    const auto &pixel = pixels[i];
    colour_to_rmts(pixel.g, rmt_items_head);
    colour_to_rmts(pixel.r, rmt_items_head + 8);
    colour_to_rmts(pixel.b, rmt_items_head + 16);
  }
  rmt_write_items(channel, rmt_items, rmt_items_size, true);
}
{% endhighlight %}

成功了：利用RMT的方式不仅仅更好编程（代码更清楚地表达我们的目的：我们写的代码只需要管理如何把信号编码好，不需要管理怎么把编码的信号传送好），而且结果更稳定，如下面视频所示。

<div class="myvideo">
   <video  style="display:block; width:100%; height:auto;" controls loop="false">
       <source src="{{ site.baseurl }}/assets/2019-12-01-esp-idf-4/rmt.mp4" type="video/mp4" />
   </video>
</div>

如下个帖子，我们把所有的源码放在[GitHub的上面](https://github.com/janm399/threebodies-code)，把它clone，然后试一试编译，烧录吧。

# 下一次
下一次，我们来探索如何利用（硬件）串行接口为了建构一个包含GSM配件的项目，该项目是被一般（古老，我们知道！）短信控制的。同时去买一个SIM卡把，再加考虑是否你有适合电源：我们会使用SIM 800L元件，可是它需要提供$$3.7-4.0V @ 2A$$的电源！基本上有两个选择：要么加上一个独立GSM元件，然后使用一个buck变换器（linear变换器的效率很低，因此它们不会提供这么高电流），要么把ESP32换成一个USB-C、包含SIM元件的。
