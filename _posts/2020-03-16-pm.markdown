---
layout: post
title:  "Scala case class和模式匹配"
date:   2020-03-13 15:00:00 +0000
categories: [SW]
excerpt: "Scala case class和模式匹配"
hidden: true
---
# case class
本文章所讨论的是最常见的数据结构体，特别是在Java虚拟机，这就意味着我们会谈怎么最好，最方便地定义适应数据结构体的对象。那么，对象意味着JVM中的数据结构体并不是零代价抽象，除结构体中的所有字段之外，每一个对象都有自己的代价，这恐怕是JVM的基本设计。

## 避免单调、重复的代码
既然JVM没有零代价抽象，我们也不能放弃所有的可靠，可维持的代码规则。其中有最大影响是不可变性，不可变的，也就是说只读的，值在多线程的环境下能够安全地计算。最好从一个简单例子开始吧，下面的代码所示是Java做法来完全只读的结构体。

{% highlight Java %}
public class User {
    private long id;
    private String username;

    public User(long id, String username) {
        this.id = id;
        this.username = username;
    }

    public long getId() { return id; }
    public String getUsername() { return username; }
}
{% endhighlight %}

该`User`实例的确是不可变的，只读的值；一旦构造器执行完，它产生的值便无法被改变了。如果你负责将代码评价，你一定会发一些建议。

* 构造器允许`User`中的字段`username`赋值于`null`
* 该类型完全缺乏`hashCode`，`equals`
* 虽然不必要的，但`User`还缺乏适应`toString`实现

我们编写下去，终于得到下面的代码。

{% highlight Java linenos %}
public class User {
    private long id;
    private String username;

    public User(long id, String username) {
        if (username == null) throw new IllegalArgumentException("...");

        this.id = id;
        this.username = username;
    }

    public long getId() { return id; }
    public String getUsername() { return username; }

    @Override 
    public boolean equals(Object o) {
        if (o instanceof User) {
            User that = (User)o;
            return this.id == that.id &&
                   this.username.equals(that.username);
        } else return false;
    }

    @Override 
    public int hashCode() {
        //
    }

    @Override 
    public String toString() {
        //
    }
}
{% endhighlight %}

我的天！为了正确地包起来两个字段必须编写三十多行源码，而且最讨厌的是大部分是完全单调的、重复的。不必说，许多IDE能够自我产生其源码，开发者却需要将产生代码阅读，维修。

万一你没意识到问题在哪里：为了表达我们的目标，即为了将两个字段包起来，证明允许的值，`User`对象包括：

* 一行为了定义`User`容器的对象
* 两行为了定义`username`，`id`字段
* 一行为了证明允许的值
* 三十多行为了满足Java的句法、执行时的需求

## Scala方式
为了解决这个问题，Scala提供一个特别的容器，所谓`case class`。从编译器所产生的bytecode看来该`case class`跟前面定义的Java对象差不多，它也包含适应的构造器、getters、`equals`、`hashCode`、`toString`，与此同时保证不可变性。那么，所需的Scala代码到底有多长？

{% highlight Scala linenos %}
case class User(id: Long, username: String) {
  require(username != null)
}
{% endhighlight %}

千万不开玩笑：一共有三行。继续讨论`case class`以前，我们应该仔细地查看Scala编译器产生的bytecode，如下面图所示。

![](/assets/2020-03-16-pm/CC.class.bc.png)

如可见，除了构造器和两个getters以外，Scala编译器也产生了比较多其他方法。乍一看，`case class`的方便性的代价太高了，包括构造器一共有20个方法，下面的代码所示其中的最终好的。

{% highlight Java %}
CC.class:

// 构造器
void <init>(long,java.lang.String) { }

// username字段的getter
java.lang.String username() { }
// id字段的getter
long id() { }

// 适应java.lang.Object中的三个基础方法的现实
boolean equals(java.lang.Object) { }
int hashCode() { }
java.lang.String toString() { }
{% endhighlight %}

其余的方法提供Scala的某些句法糖，可惜在Java无法顺利地使用。

{% highlight Java %}
var cc = new CC(1, "d");

cc.id();       // 返回1
cc.username(); // 返回"d"
{% endhighlight %}

当然了，我们一般不管如何在Java采用Scala的类型，如下面代码所示，Scala句法比Java更简洁，主要点包括：

* 行1，2：不要添加`new`关键词，要直接写`CC(...)`
* 行3：不要随着Java getter的起名风俗，虽然我们写的`cc.id`看似直接接触私人的字段，但实际上`.id`将会调用适应getter方法
* 行4：与Java不同的是等式算子`==`确实调用`equals`方法

{% highlight Scala linenos %}
val cc1 = CC(1, "a")
val cc2 = CC(1, "a")
println(s"{cc1.id} -> ${cc1.username}")
println(cc1 == cc2)
{% endhighlight %}

还剩下深入地探索已提出的所谓零代价抽象：看到了Scala编译器所产生的方法，难道句法糖再放便，程序执行时的影响都太大了？这个难题这里无法解决，下一个帖子会探索执行时影响。

## case class的基本能力
说到这里，很容易想`case class`唯一个好处在于简洁句法，也就是说源码行越少bugs也越少。虽然bugs的常见来源便是可变性，但不可变性实现确实不可变性的代码偶尔太复杂了，太冗长了。举经典的例子，假设我们需要更新一个字段，调用`case class`实例的`copy`方法即可，如下面源码所示。

{% highlight Scala linenos %}
val cc1 = CC(1, "a")
val cc2 = cc1.copy(username = "b")
{% endhighlight %}

第一行定义不可变的变量`cc1`，第二行通过复制`cc1`中的所有字段所产生另外一个实例。请注意：我说的复制意味着将构造器调用于刚刚更新的字段值，也就是说构造器将会接收要么JVM所定义的*primitive*，要么实例指针。如果是*primitive*（比如`int`，`long`等），那么把它复制后会得到确实独立值，如果是实例，那么把它复制后会得到复制的指针，指针的目的基础实例不会被复制了。因此，**如果实例是可变的，那么虽然`case class`自身保证不可变性，虽然我们将`case class`实例值赋值于不可变的变量（`val`），但这并不意味着在任何可能的情况下得到正确不可变的实例**。下面的代码所示便是这个隐患。

{% highlight Scala linenos %}
case class HiddenDanger(id: Long, image: Array[Byte])

val hd1 = HiddenDanger(1, Array(1, 2, 3, 4))
val hd2 = hd1.copy()
hd2.image.update(0, 65)

ju.Arrays.toString(hd1.image) == ju.Arrays.toString(hd2.image) // true！
{% endhighlight %}

其难题恐怕是在Java虚拟机都无解的；总之，为了尽量保证不可变性，我们尽量必须避免可变的类型。以分别哪一个类型是可变的，最简简单的方法是看它所提供的方法：如果具有类似于setter，那么要注意，setter的存在可能意味着该类型的可变性。

----

# 模式匹配
Scala提供的模式匹配有三种：

* 类型匹配
* 常数与判断匹配
* 变量赋值/结构匹配

## 类型匹配
最简单模式匹配类似于Java的`instanceof`判断，如果`a instanceof X`判断是满意的，那意味着变量`a`便是一个属于`X`类型的实例。于是，我们能将它投影（cast）到`X`类型时不会遭遇`ClassCastException`异常。因此，常见的Java代码便是随着该逻辑。

{% highlight Java %}
class X {
    private int a;

    @Override
    public boolean equals(Object o) {
        if (o instanceof X) {
            X that = (X)o;
            return this.a == that.a;
        } else return false;
    }
}
{% endhighlight %}

许多开发者觉得如上面的代码不简洁，虽然各种IDE会自动产生这样的代码，但是如果我们后来做一些修改，我们不得不要么再让IDE产生该`equals`，要么手动地修改。那么，利用Scala来实现一样的代码如何？

{% highlight Scala %}
class X {
  private var a: Int

  override def equals(o: AnyRef): Boolean = o match {
    case that: X => that.a == this.a
    case _       => false
  }

}
{% endhighlight %}

`match`关键词指着式匹配的词句，`match`里面有至少一个模式，每一个模式都由`case`开头，随着`case`有具体的模式词句。上面代码使用最基本的，跟`instanceof`一样的功能。关注不仅仅`case`的右边可以直接指左边定义的`that`变量，而且`that`的类型便是`X`。这里要提及另外一个JVM的编程语言：[Kotlin](https://kotlinlang.org/docs/reference/typecasts.html)[^1]。

----

## 变量赋值/结构匹配
以前谈的`case class`结构跟变量赋值和结构匹配有紧密关系。可以说在某些情况下我们不管数据的容器如何，我们只想要将数据取出，赋值于变量。好在，Scala提供很自然的方法以不仅仅现结构匹配，而且将`case class`的字段取出，如下面代码所示。

{% highlight Scala linenos %}
val users = List(CC(1, "janmachacek"),
                 CC(2, "anirvanchakraborty"),
                 CC(3, "陈钦强"))
val firstUsernameCharacters = users.map { x =>
  x match {
    case CC(_, username) => username(0)
  }
}
{% endhighlight %}

以将`x => x match { ... }`简洁一下，Scala的句法糖让我们删除`x => x match`，直接编写`case`关键词，简单化后得到下面的代码。

{% highlight Scala linenos %}
val firstUsernameCharacters = users.map { 
  case CC(_, username) => username(0)
}
{% endhighlight %}

虽然简洁，但最简洁方法便是避免全部模式匹配，把`map`的参数代替`_.username(0)`。下面的代码表示重构的结果。

{% highlight Scala linenos %}
final case class CC(id: Long, username: String) {
  override def firstUsernameCharacter: Char = username(0)
}

val firstUsernameCharacters = users.map(_.firstUsernameCharacter)
{% endhighlight %}

上面的代码所示比模式匹配更简洁，而且能够增加代码的重复利用性，大量地减少bug的可能性。所以，模式匹配到底有没有好用的地方？为了演示地更清楚，先把`CC`类型复杂化一下。

{% highlight Scala linenos %}
// 使用Scala 2.x的句法
sealed trait CC
case object CC {
  final case class Basic(id: Long, username: String) extends CC
  final case class OAuth(token: String) extends CC
  final case object Guest extends CC
}

// 使用Scala 3的句法
enum CC {
  case Basic(id: Long, username: String)
  case OAuth(token: String)
  case Guest
}
{% endhighlight %}

不管你选哪一个Scala版本，基本的概念还是一摸一样。我们所表达是用户的来源有三个可能。（这里不要多考虑现实的意思。）只要我们意识到用户的数据有三个可能即可。现在呢，只有`CC.Basic`类型能够返回用户名的第一个字母，其他可能或子类（即`CC.OAuth`，`CC.Guest`）无法包括“用户名的第一个字母”的概念。一个方法是犯罪hack，决定虽然只有`CC.Basic`能够提供“用户名的第一个字母”的概念，但其余子类能够返回一种默认值，比如使`CC.OAuth`中的`getFirstUsernameCharacter`返回`o`，使`CC.Guest`返回`g`。我希望你们也觉得这个绝对不行。

{% highlight Scala linenos %}
val users = List(CC.Basic(1, "janmachacek"),
                 CC.OAuth("...."),
                 CC.Guest)
val firstUsernameCharacters = users.flatMap { 
  case CC.Basic(_, username) => Some(username(0))
  case _                     => None
}
{% endhighlight %}

说不定你还会反对，为什么不要将`getFirstUsernameCharacter`的返回类型重构到`Option[Char]`，接下来把它在`CC`的子类实现好？我觉得这是一点点编程哲学的问题，虽然`None`所表示的是缺席，但——至少在我看来——存在着一个返回`Option`的函数表明其返回值是合理的，这里为了将代码方便化我们非要定义不可实现的方法。

### 序列模式匹配
Scala为了序列模式匹配好像提供一个特别句法，拿一个`List[Int]`的变量，序列模式匹配句法是

{% highlight Scala linenos %}
val users: List[CC] = List(...)

users match {
  case a :: b :: c :: Nil => 
    // (1)
  case Nil                => 
    // (2)
}
{% endhighlight %}

虽然上面的代码好像表示Scala包括某些特别序列模式匹配的支持，但是主要是针对于Scala标准库中的`::`和`Nil`的定义，如下面代码所示。

{% highlight Scala linenos %}
trait List[A] { ... }
case class NonEmpty[A](head: A, tail: List[A]) extends List[A]
case object Empty extends List[Nothing]
{% endhighlight %}

暂时，想象`NonEmpty`相当于`::`，`Empty`相当于标准库中的`Nil`。使用`NonEmpty`和`Empty`来重构前者例子产生下面的代码。

{% highlight Scala linenos %}
users match {
  case NonEmpty(a, NonEmpty(b, NonEmpty(c, Empty))) =>
    // (1)
  case Empty                => 
    // (2)
}
{% endhighlight %}

这样一定能够理解清楚，`NonEmpty`和`Empty`二者类型是通常类型，通常`case class`；因此代码依靠通常模式匹配规则。将代码弯路地再重构，将`NonEmpty`和`Empty`再重构成`::`和`Nil`，我们获得下面的代码。

{% highlight Scala linenos %}
users match {
  case ::(a, ::(b, ::(c, Nil))) =>
    // (1)
  case Empty                => 
    // (2)
}
{% endhighlight %}

你一定同意其代码没有任何神奇奥妙的意义，还是通常模式匹配。最后一步骤是应用Scala句法中《接收两个参数的函数能够使用于算子》，因此`::(a, ::(b, ::(c, Nil)))`相当于`a :: b :: c :: Nil`。没有任何神奇奥秘的意义，不依靠任何特别编译器支持。

### _

以便处理这三个可能，我们必须重构调用于`users.map`的函数。


问题来了，为什么不要添加于`CC`一个类似于`getFirstUsernameCharacter`的（抽象）方法，接下来在每一个子类都提供适应的实现？以便做好决定，我们必须考虑向要添加的性能如下的问题：

* 有没有外在数据的依赖，每一个子类都能够提供适应的实现
* 现实的是否纯函数还是引起副作用的方法
* 计划时无知的性能

虽然这里没有任何固定的规则，但我建议只在第一个情况下将所需的方法实现于成员。让我们由具体例子来更仔细地看。

### 没有额外的依赖，每一个子类都能够实现其抽象方法
因此，下面的代码表示所需的重构。

{% highlight Scala linenos %}
sealed trait CC {
  def firstUsernameCharacter: Char
}
case object CC {
  final case class Basic(id: Long, username: String) extends CC {
    require(username != null)
    override def firstUsernameCharacter: Char = username(0)
  }
  final case class OAuth(token: String) extends CC {
    require(token != null)
    override val firstUsernameCharacter: Char = 'o'
  }
  final case object Guest extends CC {
    override val firstUsernameCharacter: Char = 'g'
  }
}
{% endhighlight %}

请注意，按照Scala句法中的《方法和成员的变量统一性》，可以使用`def`或者`val`来实现`firstUsernameCharacter`。说到这里，在什么情况下模式匹配不如避免抽象方法？总之，要么在于某些子类中的实现是无做的，要么实现是引起副作用的。

### 无做的实现
无做的现实是对象式代码的大罪，由具体例子来表示吧。

{% highlight Scala linenos %}

{% endhighlight %}

* noop的实现
* 副作用

> *sum type*和*product type*：`CC`所定义的是所谓*sum type*，也就是说`CC`类型有三个可能的值，即`Basic`、`OAuth`、`Guest`。那么，它们分别有多少可能的值？让我们算一算吧：`Guest`没有任何参数，所以只有一个可能的值，接下来`OAuth`有一个参数，即`token: String`。`String`有多少可能的值？确切数得看jvm heap的大小，这里举几个例子吧：`""`，`"a"`，`"aa"`, ……, `"a(*n)`，`ba(*n-1)`等，因此`OAuth`可能的值数等于它的参数的可能值数。`Basic`随着一样的模式：一共有`String` * `String`那么多可能的值数。因此，我们将`case class`叫做*product type*，而将`sealed trait`的子类结构叫做*sum type*。

## 常数与判断匹配
随着类型匹配，常数匹配第二简单

回想我们以前所定义的`CC`类，。。。

{% highlight Scala %}
case class CC(id: Long, username: String) {

  override def equals(o: AnyRef): Boolean = o match {
    case CC(id, `username`) if id < 0L => true
    case CC(`id`, `username`)          => true
    case _                             => false
  }
}
{% endhighlight %}


----

[^1]: [Kotlin](https://kotlinlang.org/docs/reference/typecasts.html)