---
layout: post
title:  "文档有多么重要呢？"
date:   2020-10-27 11:00:00 +0000
categories: [Scala]
excerpt: ""
hidden: true
---

# 一、前言
初学者是如何学习一门编程语言？作为背景，我的公司招聘了五个非常厉害的实习者：从400个简历请了120个人来做编程的考试，108个人考完了。在分析考试的成绩当中， 我们把成绩分别为四种：

- 放弃了：一行代码都没写
- 试图了：探讨了数据的结构，写了几个`println`式的行，不过代码（很明显地）是未完成的
- 完成了：总体来看，不管成绩如何，呈送的代码是完成的
- offer：面试后收到公司的offer

![](/assets/2020-10-31-intro/results.png)

令人惊讶的是考试的成绩好像只有两个极端[^1]。一方面86个答案可以说是完全失败的（成绩为0或10，代码好像完全不匹配考试问的问题，有很严重句法的错误，不了解对象或者`struct`、`list`、`map`的是什么*概念*等等），一方面17个答案令人很满意（成绩为125以上，有几个答案使用很雅婷函数式的代码，其余虽然比较命令式，但是数据、函数/方法的结构很简洁）。成绩是通过unit tests而算出的，不过要注意：自动测试会将有编译时错误的答案评价为零，不过有些错误是微不足道的、很容易被解决的。还有些答案，虽然没有任何编译时的错误，但是还有一两个微不足道的“打字错误”，比如打错一个从JSON读取对象的属性（打`perference`而不打`preference`)、数组算法中“off-by-one“的错误等等。接下来还有几个有错的常数值（`30`而不是`50`等等)的答案。结果，负责评价的团队把每一个答案复查，把需要这种简单的修改就修好，然后再执行了自动测试。这样公司确认每一个申请者得到了公正的评价。最终公司邀请了17个最佳申请者来面试。面试时我们专心于呈送的代码（最重要的问题是怎么把代码改善、重构、优化），接下来面试的话题分别是大学课程、（大型）系统的结构、可靠性、测试性等等。最终公司给五个最佳申请者发一个offer。

[^1]: 只有两个极端的成绩太让我惊讶了，我预计成绩会按照正态分布（大部分的成绩在中间）。我正在写一份研究来探索该非预计的分布：要考虑考试歧不歧视一些少数人群、考试跟大学教的课程完全不匹配等等的问题。

负责评价的团队强烈认为给申请者仔细的反馈应该是很普遍的事情，结果团队给每一个属于*完成了群*的申请者写一张仔细的code review。

![](/assets/2020-10-31-intro/fb.png)

那么，虽然得到offer是最佳的，但是五个实习者并没遇到Scala。我说服了大家这并不是大问题，有了适合的导师，实习者毫无疑问会在很短时间内习得Scala。你行你上吧，结果我变成导师了。

# 二、Scala入门
一开始教Scala课程，我问了问实习者是否他们觉得要从最基本概念开始学习。我把最基础概念定义

- 为变量和常数
- 具体数据类型（`Int`、`String`等等）
- `if-then-else`条件
- 基础数据结构（一般类`class`、案例类`case class`、元祖`(...) tuple`)
- `while`循环，`for`作为循环

我确信已熟悉Scala的同学也觉得这些是Scala的基础，而且跟其他编程语言很像的概念。掌握它们，实习者就可以专心于更高级的Scala句法和用法，比如模型匹配、高阶函数（特别是标准库中的常用高阶函数`map`、`filter`、`flatMap`)、介绍高阶类型（`Option`、`List`、`Either`)、（尾）递归函数等等。所以第一节课问的问题“你们要从零开始学习？”太尴尬了。按照考试、面试实习者很明显地已经掌握了这些大部分的编程语言拥有的基础。不管如此，第一个星期我们从头到尾探讨了这些。第一节课我给他们准备一个模版、只有`build.sbt`的Scala项目，然后我们使用IntelliJ IDEA中的Scala REPL来讨论如何用Scala。

![](/assets/2020-10-31-intro/repl.png)

我们的进步非常快：一个星期内我们把所有上述的基础学会了。第一捷克我觉得我在小看他们的能力，我一直提醒了自己“看他们的考试吧，他们已经知道如何编译，不要浪费时间，不要给他们教变量、`String`、`Int`、条件”。不管如此，教了两个小时的课后，我确信实习者都完全了解变量和常数、具体数据类型、条件。唯一个新学的东西是Scala中一切都是表达式，也就是说甚至连`if`都是计算为一个具体的值的。




我觉得实习者的进步非常好，一个星期内我们从最基本的概念

一开始好像甚至连最基本的概念对实习者太难懂了，仿佛上课的时候什么都看得懂，

教两个月的课之后我觉得最难懂的话题有两种：怎么把刚刚学的概念适用于公司官方的项目。




这些”你看吧，只需要很简单、很明显的修改“的答案

这里我要提出本来属于失败的答案，但是公司还发答案的人邀请做面试，而且面试后发一个offer。

实习者是大二的学生，他们学的专业分别是一个数学、一个EEE、三个CS。

# 一、前言
我确信大家会直接回答：这是什么样的问题，文档当然太重要了；没有它我们会如何知道一门语言、框架、库等等是怎么用的。假设你决定要实现一个最基本的、提供一个返回着Hello， world的HTTP服务器，

![](/assets/2020-10-31-documentation/http4s-intro.png)

你觉得上面的片段如何？

今年我有机会当一个导师，给几个刚刚开始使用Scala的人在职培训。本来我打算的是按照一种传统的课程：首先给他们掌握最基本的概念，然后逐渐地加更复杂的语言的机构。我以为这是个很自然的过程，我们都先必掌握解基础，再后通过好学的基础来利用更高级的架构、了解全面的系统结构。不过开始这门课程不久之后，我发现这个“一步一步来的学习方法”不仅仅太长了，而且太令人不满意，太令人失望。我觉得原因只有一个：_有用的系统一般依靠高级的架构、利用高级语言的性能_。

作为一个例子，拿Scala一个使用者Scala标准库的程序。

{% highlight Scala linenos %}
def sum(list: List[Int]): Int = list match {
  case Nil          => 0
  case head :: tail => head + sum(tail)
}
{% endhighlight %}

上面的源码所示的是几个重要概念：怎么定义纯函数、怎么用模式匹配、怎么通过递归的函数避免可变的变量。我个人常常教的就是这个例子，我希望了我的学生会不仅仅掌握Scala的句法，而且意识到上面的代码所在的潜在问题（递归太深了，`Int`太小了，更不用说效率太低了）。当然，上面的代码只是一个片段，完全、可编译的代码还需要一些修改。

{% highlight Scala linenos %}
object Main extends App {

  def sum(list: List[Int]): Int = list match {
    case Nil          => 0
    case head :: tail => head + sum(tail)
  }

  val list = List(1, 2, 3, 4, 5)
  val result = sum(list)
  println(s"result = $result")
}
{% endhighlight %}

最终的结果一共有11行的代码；把它执行时，它会给`stdout`输出`result = 15`。不错吧！这并不是我们第一个Scala项目，但是可以看出Scala多么简洁、多么高雅、多么函数式。只要加努力，继续加油，不久之后我们就会有足够的能力，我们会学会了足够的基础来实现第一个HTTP/REST服务器。

{% highlight JavaScript linenos %}
const http = require('http');

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello, World!\n');
});

const hostname = '127.0.0.1';
const port = 3000;
server.listen(port, hostname);
{% endhighlight %}




有时候有人问我“我很想学习一门函数式编程语言，比如Scala；我应该怎么样最好开始这个过程？”。不久以前我只有一个推荐：一边读一本书（比如Scala for the impatient或者XXX），一边在一个小项目实现刚刚学的内容。“太谢谢你了”，一般是最后一条消息，我以为他们开始自己的历程，没有任何再要问的问题。我一直以为Scala是好好学的语言，GitHub上面充满着处理各种各样的开源的项目，我以为文档太繁荣了，只要专心于学习，

为了好好学习Scala、Haskell等等函数式语言我们先要好好学习什么是函数，什么把它好好利用；一旦完全了解函数式编程语言的关键概念是什么，立刻跑到仔细地学习标准库的机构、数据类型、标准函数等等。


# 二、“Hello， world”、标准库…… 然后呢？


大家都知道最基本的程序和大型的程序的差别很大很大


我认为Scala，Haskell世界中的最大的问题就是怎么把上述的过程应用于建立有用的程序。
