---
layout: post
title:  "函数式到底好不好用？"
date:   2020-02-20 15:00:00 +0000
categories: [SW]
excerpt: "******"
hidden: true
---
我们常常听人说“命令式代码不好读，不好用，不流行，真是太糟糕了！” 只好使用函数式语言，才能够写最典雅的，最简洁的代码。” 听到这里你们一定在想世界上没有那么简单的答案，而且更仔细的想法会显示函数式语言的世界比命令式代码的世界一样复杂。不仅如此，在Tiobe最流行编程语言的榜单第二位置是C，古老的C！究竟函数式语言有什么好处？

# 函数式编程有什么好用？
听函数式编程的演讲偶尔让我感觉有点不安：虽然我非常了解函数式编程的目的，非常了纯函数是吧输入映射输出，可是每一个演讲举的例子不要承认现实：事实上，我们写的代码只有很少的部分能够由纯函数来表达。你一定想得起来这些例子，如下面的代码所示。

{% highlight Scala %}
// 快入门指南中的每一个demo
def f(x: Int): Int = x * 2
def g(x: Int): Int = x + 3

// 把f，g两个函数一般地调用
g(f(1))              // 返回的值 = 5

// 或者更高级的方式，依靠着Function类所定义的andThen方法
(f _ andThen g)(1)   // 返回的值 = 5

// 或者更复杂
final case class Person(name: String, age: Int)
val people: List[Person] = ???
people.maxBy(_.age)  // 返回的值 Person(?, ?)
{% endhighlight %}

函数`f`，`g`，以及所谓lambda表达式`_.age`（替代`x => x.age`）虽然是纯函数，但`f`和`g`跟命令式编程语言没有任何区别，`_.age`能够被代替“函数”指针即可。每当我听演讲这样宣布函数式编程的好处，我不得不回想我日常写的代码，不得不想函数纯是纯，但我写的代码却是为了它的副作用！说到这里，为函数式编程到底为什么越来越火？

# 避免不确定性
我们写的代码最好避免不确定性：不确定性在用户看来充满bugs，不可靠的。函数式语言通过引用透明来避免不确定，命令式语言依赖严格顺利来避免不确定性。与命令式语言不同的是，引用透明式、函数式的语言避免另外一个不确定性的根源：（可变的）状态。二者编程方法最好完全管理各种输入，包括意外的输入、状态、运行时、部署的环境。那么，支持高阶的函数和高阶的类型的编程语言提供一个合适方式来表达意外的情况。

## 引用透明
引用透明意味着把函数的调用代替该函数的内部代码后，程序的语义仍然一样。引用透明的最重要的结果是函数千万不能包括直接执行的副作用；换句话说，引用透明的程序只能使用纯函数；数学的意思的“纯函数”：函数的返回值只能够依赖该函数的参数。举例子，如果`def foo(): Int`函数是纯函数，他的返回值必定是一个常数。再考虑吧：`def foo(): Int`没有参数，随着纯函数的定义——纯函数的返回值只能够依赖参数——可见没有参数的函数无法返回非常数。下一个内涵，下一个特性就是能够把纯函数的返回值存贮在缓存里；更抽象地说，每一个纯函数能够被代替与一般`map`，与此同时，每一个`map`能够被代替与一个纯函数。纯函数只是把输入映射输出，千万不包括其他副作用。

{% highlight scala %}
enum Domain {
  case One
  case Two
  case Three
}

enum Codomain {
  case Red
  case Blue
}

object RT {

  import Domain._
  import Codomain._
  val m1: Domain => Codomain = _ match {
    case One | Two => Red
    case Three => Blue
  }

  val m2: Map[Domain, Codomain] = Map(
    One -> Red, 
    Two -> Red, 
    Three -> Blue
  )

  def test(f: Domain => Codomain): Unit = {
    assert(f(One) == Red)
    assert(f(Two) == Red)
    assert(f(Three) == Blue)
  }

  def main(args: Array[String]): Unit = {
    test(m1)
    test(m2)
  }

}
{% endhighlight %}

引用透明主要结果让人清楚地了解程序的行为，因为引用透明的程序不仅仅没有内部、可变的状态，而且程序中的函数没有任何副作用。

# 意外输入、意外状态、意外外在的因素
在我的经历上，我觉得最常遇到的问题来自于意外的输入，意外的状态、意外的外在因素；逻辑的后者算法的问题比前者罕见，而且逻辑或者算法问题比较容易地发现，容易地测试，调试。仔细地讲该问题以前，看下面的代码吧。

{% highlight scala %}
final case class DenseDataset(xs: Array[Double], ys: Array[Double]) {
  assert(xs.length == ys.length)
}
opaque type ExperimentId = String

def calculateYoungModulus(data: DenseDataset): Double 
def loadData(experimentId: ExperimentId): DenseDataset
{% endhighlight %}

即使这两个函数缺乏实现，我们还本能地知道`loadData`函数，虽然比`calculateYoungModulus`一定更容易，但是一定更”危险“。为什么呢？虽然我们英译得清楚，可是在一般情况下，`loadData`会依靠其他系统（比如某些数据库、某些文件，总之外在、无法控制的数据输入），而且即使外在系统完全可靠，`loadData`还无法保证`experimentId`是存不存在。再加时间，特别是该时间内的系统后者数据结构体的更新。突然`loadData`不仅仅需要管理外在系统的所有问题，而且还需要管理数的据兼容或变换。这些挑战虽然不特别复杂，但源码行数越多问题也越多。不仅如此，`loadData`的类型把这些问题完全无视，看该函数的类型我们无法知道怎它会么办理意外情况。如果`experimentId`不存在，它返回`null`吗？如果`experimentId`是存在的，可是数据的格式无法转换，它还返回`null`吗？如果数据库链接被破坏了，它还是返回`null`的吗？更可能的是该函数会抛出异常，最好

{% highlight scala %}
trait ExperimentRepository {
  /**
  * Loads experiment data for experiment identified by its ID
  *
  * @param experimentId the experiment identifier
  * @return the fully-loaded experiment data set
  * @throws ExperimentNotFoundException if the experiment does not exist
  */
  def find(experimentId: ExperimentId): DenseDataset = ???
}
{% endhighlight %}

行吧，虽然`loadData`的类型并不包括异常，我们可以通过ScalaDoc意识到`loadData`会跑出异常，即`ExperimentNotFoundException`。随着ScalaDoc，下面的代码应该完全地管理所有的意外情况。

{% highlight scala %}
/**
 * Loads the experiment and performs the calculation
 *
 * @return the modulus
 * @throws UnableToCalculateException if the young modulus cannot be calculated
 */
def main(): Double = {
  val experimentId = ExperimentId("123")
  try {
    val data = loadData(experimentId)
    calculateYoungModulus(data)
  } catch {
    case _: ExperimentNotFoundException => 
      throw UnableToCalculateException(experimentId)
  }
}
{% endhighlight %}

上面的代码好像是随着一般Java的智慧，每一个层都需要管理下一层的异常，把它们变换到“更抽象”类型。让我们再看上面的代码吧：遇到了`UnableToCalculateException`把`main`调用者无法知道问题的来源，只知道结果是无法计算的。这样的代码必然地导致“哎呀，出事了”。什么事？能不能重试？对用户来说“出事了”的结果没用的：除了重试以外都不知道该怎么办，错误在哪里；对开发者或DevOps人员也没用的：除了重试都不知道错误的来源在哪里，无法去调试，无法调整。严重的是，这两个异常不是全部能遇到的异常，`find`一定使用其他库的，每一个库都有自己抛出的异常——我们没考虑的异常。再更严重的是，异常只是由ScalaDoc定义的[^1]！编写时编译器无法帮助我们发现哪里有危险，编译器所看见的是类型，`find`的类型是`ExperimentId -> DenseDataset`，好像纯函数！我们依靠我们的经历，经历是告诉我们`find`，这个词意味着某些输入/输出的行动，提醒我们要注意，要管理输入/输出的错误。假设我们把`find`重命令到`generate`我们可能不意识到函数的输入/输出性。

> 旁注：目录  
> 你们可能在想：目录框架能否解决管理异常的问题？与其担心`catch`、`throw`，不如只用类似于`log.error`吗？大部分的系统毕竟包括一个整体的异常函数，该函数只好返回`HTTP 500`和把异常的细节放在日录里。

## 更确切的返回类型
让我们再考虑`find`的类型，参数的类型`ExperimentId`已经合适的，只剩下考虑返回的类型。在`find`遇到错误的情况下，它应该返回属于“错误”的值；在一般情况下，它应该返回属于“成功”的值。换句话说，`find`返回值要么是错误，要么是成功；英语，也Scala的“要么A，要么B”便是`Either[A, B]`。如下面的源码所示，`Either[A, B]`能够表达两种情况：错误和成功。

{% highlight scala %}
/**
 * Loads experiment data for experiment identified by its ID
 *
 * @param experimentId the experiment identifier
 * @return the fully-loaded experiment data set
 */
def find(experimentId: ExperimentId): Either[Throwable, DenseDataset] = ???
{% endhighlight %}

通过调用`find`我们得到`Either[Throwable, DenseDataset]`值，接下来能把刚刚返回值调查，分别他的两个基本值：`Left`和`Right`。得到`Left`值意味着`find`出现问题了，`Left`中的`Throwable`子类是问题的原因/细节。`Right`意味着该函数成功了，`Right`中的值便是我们想获得`DenseDataset`。完美的，我们把项目中所有的函数类型变成`Either`即可吧，接下来我们可以把所有的函数连起来在一起来得到一个完美、巨大的函数。可惜的是，虽然我们把`find`叫做“函数”，但是它并不是数学的函数，并不是纯函数。纯函数最基础的规定之一是接收到一样的参数时，函数必须返回一样值。我们谈过的`f`，`g`函数满足这特性。调用`f(2)`总是会返回`4`。`ExperimentRepository.find`呢？它的返回值其实依赖外在的情况，即数据库中的数据！

确实`ExperimentRepository.find`是一个副作用性的函数。副作用的经典例子，经典的玩笑就是`def foo(): Int = { launchNuclearMissiles(); 42 }`，虽然从外面看`def foo(): Int`好像是纯的函数，但它包括一个“副作用”，即`launchNuclearMissiles()`。总之，副作用意味着该函数并不是数学的函数，而是一般命令的序列。如果我们的编程语言无法表达副作用式函数和纯函数的区别，我们没办法把每一个函数有副作用看待。

## 运行的环境，线程
虽然`loadData`的返回类型能够表达错误和成功的情况，因为返回值是“一般”值，函数不得不同步地进行，无法非同步地执行。不过，

{% highlight scala %}
/**
 * Loads experiment data for experiment identified by its ID
 *
 * @param experimentId the experiment identifier
 * @return the fully-loaded experiment data set
 */
def find(experimentId: ExperimentId): Future[DenseDataset] = ???
{% endhighlight %}

这里`Future`所表达的是，`find`不仅仅会引起某些副作用，而且需要一段时间才能返回。问题来了呢，这样来实现`ExperimentRepository.find`太具体了。第一个太具体的原因来自于`Future`的本身执行方式。`Future`需要一个`ExecutionContext`。该`ExecutionContext`是一个线程池的接口，每一个`Future`实例属于一定`ExecutionContext`；更正确地说，创建一个`Future`实例时会调用`ExecutionContext`的接口为了得到一个线程，接下来把`Future`中的程序部署到刚刚得到的线程。随着我们的例子，要么`find`本身包括一个`ExecutionContext`类的参数，要么`ExperimentRepository`的（子类）中的所有函数使用一个共同`ExecutionContext`实例。哪一个选择更适合得看情况；广义地说，主要的是好好管理线程池的配置，好好管理线程的数量。引起输入或输出的行动（一般是仓库的次层和接口的次层）一般要采用“无限”的线程池，依靠处理器来执行算法一般要采用“确定”的线程池。因此，与其给`find`加上一个`ExecutionContext`类的参数，不如给`ExperimentRepository`的具体子类提供一个共同`ExecutionContext`，如下面代码所示。

{% highlight scala %}
trait ExperimentRepository {
  def find(experimentId: ExperimentId): Future[DenseDataset]
}

class DefaultExperimentRepository(given ec: ExeuctionContext) 
  extends ExperimentRepository {

  override def find(experimentId: ExperimentId): Future[DenseDataset] = ???
}
{% endhighlight %}

这样来实现`DefaultExperimentRepository`的类型好像完全正确地表达各种可遇到的情况。查看`find`函数的类型可见它会引起某些副作用，而且可见它是在另外一个线程执行的。不幸运的是，`ExperimentRepository`接口，虽然应该是最抽象的，但是它定义实现的细节，即`find`一定是一个引起副作用，在另外一个线程执行的行动。假设有一个测试性的`ExperimentRepository`子类，在一般情况下，测试性版本需要提供可靠的、固定的输出，因此实现一般是“返回常数值”，这并不需要担心线程。

## 高阶的类型
与其使用具体的`Future`类型，不如利用Scala的高阶的类型系统，把`ExperimentRepository`重构到利用抽象的类型参数`F[_]`。（我们把该类型的参数叫做`F`，*functor*的缩短；为了好好了解具体的用法我们不需要担心functor的数学定义。为了了解更多，看看[Haskell 里面的 functor 是个什么概念](https://www.zhihu.com/question/26585629)[^2]吧。）

{% highlight scala %}
trait ExperimentRepository[F[_]] {
  def find(experimentId: ExperimentId): F[DenseDataset]
}
{% endhighlight %}

`ExperimentRepository`的类型参数让实现的子类确切地表达运行时的需求，与此同时`ExperimentRepository`接口类不定义实现的细节，只要实现的子类提供需要一个类型参数（也所谓类型的构造器）的具体高阶的类型，就好了。结果，来重构本来的`DefaultExperimentRepository`得到下面的代码。

{% highlight scala %}
class DefaultExperimentRepository(given ec: ExecutionContext) 
  extends ExperimentRepository[Future] {
  override def find(experimentId: ExperimentId): Future[DenseDataset] = ???
}
{% endhighlight %}

与此同时，抽象的类型参数让我们实现测试性的版本，测试性版本不需要担心`Future`，`ExecutionContext`，它能够直接返回`DenseDataset`值。可是我们还需要提供一个（一元的）类型构造器…… 我们知道一元的类型构造器包括`List`，`Option`，`Future`等等，可是我们所需要的是一种透明的容器。前者类型构造器意味着一定结构。我们要定义一个需要一个类型的参数的，“返回”该类型的高阶的类型。换句话说，直接返回接到的类型的高阶的类型：`type Id[A] = A`即可！

{% highlight scala %}
type Id[A] = A

class TestExperimentRepository extends ExperimentRepository[Id] {
  override def find(experimentId: ExperimentId): Id[DenseDataset] = DenseDataset.empty
  override def findAll(): Id[List[DenseDataset]] = List.empty
}
{% endhighlight %}

假设我们想加上一个类似于返回所有的数据的函数，我们该怎么办，怎么最好来定义“返回所有的数据“的函数类型？最自然方法可能是`findAll(): F[List[DenseDataset]]`，你们一定会立刻意识到问题在哪里。大数据，甚至连小数据无疑会引起`OOM`，即使不会引起`OOM`，来寻找，返回所有的数据会引起垃圾回的压力。`ExperimentRepository`抽象接口最好不定义实现的细节，我们已经意识到这一点。因此，加上另外一个高阶的类型参数即可。

{% highlight scala %}
trait ExperimentRepository[F[_], G[_]] {
  def find(experimentId: ExperimentId): F[DenseDataset]
  def findAll(): F[G[DenseDataset]]
}
{% endhighlight %}

测试性的实现一定会把`G`代替一般`List`类型构造器，`DefaultExperimentRepository`可能会利用`Stream`来一边避免垃圾收回的压力，一边返回好用的流数据接口。

{% highlight scala %}
trait Stream[A] { ... }

class DefaultExperimentRepository(given ec: ExecutionContext) 
  extends ExperimentRepository[Future, Stream] {
  override def find(experimentId: ExperimentId): Future[DenseDataset] = ???
  override def findAll(): Future[Stream[DenseDataset]] = ???
}
{% endhighlight %}

说到这里，我们考虑下去吧，调用`DefaultExperimentRepository`构造时无法控制`ExperimentRepository`的类型参数，因此如果需要把`Future`或者`Stream`类型参数代替另外类型，唯一个办法是构建另外一个子类。我们把`ExperimentRepository`抽象化下去，与其具体`Future`和`Stream`类型参数，不如使用另外一个抽象的类型`F[_]`，假如把`ExperimentRepository`的子类实例化时编译器能够寻找或者派生所需的*typeclass*。*typeclass*确实是一般实例，唯一个差别在于编译器会——随着类型定义——自动地寻找或者派生适合typeclass实例[^3]。那么，更抽象`ExperimentRepository`的子类该包括什么能力？总之，它所需提供的是一个变换的方法，把任意值变换成`F[_]`实例。太抽象了，举个例子吧。

{% highlight scala %}
trait Ops[F[_]] {
  def pure[A](value: => A): F[A]
}

// Scala 3.x的句法
given futureOps(given ec: ExecutionContext) as Ops[Future] {
  def pure[A](value: => A): Future[A] = Future { value }
}

// 或者依靠Scala 2.x的句法
implicit class FutureOps(implicit ec: ExecutionContext) extends Ops[Future] {
  ...
}
{% endhighlight %}

编译器能够寻找或者派生`Ops[F[_]]`实例来提供`ExperimentRepository`的子类（被构造时）所需的行为。在一般情况下，我们不会从头来定义，实现typeclass，我们最好依靠某些类库提供的typeclass。比如，使用cats-effect[^4]我们会把上面的代码重构成下面的。

{% highlight scala %}
class DefaultExperimentRepository[F[_]](given F: Sync[F])
  extends ExperimentRepository[F, List] {
    
  def find(experimentId: ExperimentId): F[DenseDataset] =
    F.pure(DenseDataset.empty)
  def findAll(): F[List[DenseDataset]] = 
    F.pure(List.fill(10000)(DenseDataset.empty))
}
{% endhighlight %}

{% highlight scala %}
class StreamingExperimentRepository[F[_]](given F: Sync[F])
  extends ExperimentRepository[F, ({type L[A] = fs2.Stream[F, A]})#L] {

  def find(experimentId: ExperimentId): F[DenseDataset] = ???
  def findAll(): F[fs2.Stream[F, DenseDataset]] = ???

}
{% endhighlight %}

---
TODO: 测试性，测试的策略

---

[^1]: Java是唯一个支持checked异常流行编程语言，checked异常意味着编译器将验查是否为所有的已检查异常提供了异常处理机制，而且每一个函数定义都必须包括所有可抛出的验查异常
[^2]: [Haskell 里面的 functor 是个什么概念](https://www.zhihu.com/question/26585629)
[^3]: [Shapeless入门指南（一）：自动派生 typeclass 实例](https://juejin.im/post/59bb60c1f265da06611f5a89)
[^4]: [Cats Effect](https://typelevel.org/cats-effect/)

