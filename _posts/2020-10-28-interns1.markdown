---
layout: post
title:  "Scala入门"
date:   2020-10-27 11:00:00 +0000
categories: [Scala]
excerpt: ""
hidden: true
---

# 一、前言
今年我有机会当一个导师，给几个刚刚开始使用Scala的人在职培训。本来我打算的是按照一种传统的课程：首先给他们掌握最基本的概念，然后逐渐地加更复杂的语言的机构。我以为这是个很自然的过程，我们都先必掌握解基础，再后通过好学的基础来利用更高级的架构、了解全面的系统结构。不过开始这门课程不久之后，我发现这个“一步一步来的学习方法”不仅仅太长了，而且太令人不满意，太令人失望。我觉得原因只有一个：_有用的系统一般依靠高级的架构、利用高级语言的性能_。

作为一个例子，拿Scala一个使用者Scala标准库的程序。

{% highlight Scala linenos %}
def sum(list: List[Int]): Int = list match {
  case Nil          => 0
  case head :: tail => head + sum(tail)
}
{% endhighlight %}

上面的源码所示的是几个重要概念：怎么定义纯函数、怎么用模式匹配、怎么通过递归的函数避免可变的变量。我个人常常教的就是这个例子，我希望了我的学生会不仅仅掌握Scala的句法，而且意识到上面的代码所在的潜在问题（递归太深了，`Int`太小了，更不用说效率太低了）。当然，上面的代码只是一个片段，完全、可编译的代码还需要一些修改。

{% highlight Scala linenos %}
object Main extends App {

  def sum(list: List[Int]): Int = list match {
    case Nil          => 0
    case head :: tail => head + sum(tail)
  }

  val list = List(1, 2, 3, 4, 5)
  val result = sum(list)
  println(s"result = $result")
}
{% endhighlight %}

最终的结果一共有11行的代码；把它执行时，它会给`stdout`输出`result = 15`。不错吧！这并不是我们第一个Scala项目，但是可以看出Scala多么简洁、多么高雅、多么函数式。只要加努力，继续加油，不久之后我们就会有足够的能力，我们会学会了足够的基础来实现第一个HTTP/REST服务器。

{% highlight JavaScript linenos %}
const http = require('http');

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello, World!\n');
});

const hostname = '127.0.0.1';
const port = 3000;
server.listen(port, hostname);
{% endhighlight %}




有时候有人问我“我很想学习一门函数式编程语言，比如Scala；我应该怎么样最好开始这个过程？”。不久以前我只有一个推荐：一边读一本书（比如Scala for the impatient或者XXX），一边在一个小项目实现刚刚学的内容。“太谢谢你了”，一般是最后一条消息，我以为他们开始自己的历程，没有任何再要问的问题。我一直以为Scala是好好学的语言，GitHub上面充满着处理各种各样的开源的项目，我以为文档太繁荣了，只要专心于学习，

为了好好学习Scala、Haskell等等函数式语言我们先要好好学习什么是函数，什么把它好好利用；一旦完全了解函数式编程语言的关键概念是什么，立刻跑到仔细地学习标准库的机构、数据类型、标准函数等等。


# 二、“Hello， world”、标准库…… 然后呢？


大家都知道最基本的程序和大型的程序的差别很大很大


我认为Scala，Haskell世界中的最大的问题就是怎么把上述的过程应用于建立有用的程序。
