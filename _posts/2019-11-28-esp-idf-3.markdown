---
layout: post
title:  "ESP-IDF 3：使用RMT以实现2812驱动程序"
date:   2019-11-07 17:00:00 +0000
categories: [HW, SW]
excerpt: "???"
hidden: true
---
利用FreeRTOS为了控制一个LED、办理一个按键虽然很好玩，但我们应该利用FreeRTOS和ESP32的能力为了构建更复杂项目，同时我们最好探索一个新I/O方法。我们会利用WS2812智能外控集成LED光源，从起点实现控制驱动代码；一开始使用最简单方法，即随着2812指南，接下来把该简单代码改善、最终把该一步一步来、“面条式”代码代替利用ESP32提供的RMT的程序。

# 2812 LED元件
我们以每一个2812 LED元件为一个像素，每一个像素都包含一个输入、一个输出；进行时像素从输入读取24个比特，把剩下输入发到它的输出；在一般情况下，把第一个2812输出连接到第二个2812的输入，这样可以把几个2812连接在一起。为了控制该2812串，只需要把足够个信号传输第一个输入去。足够信号是多少？每一个像素、每一个2812都会消费$$8*3b$$：每一个颜色需要$$8b$$；因此如果我们把$$n$$个2812元件串起来，我们需要把$$n*3b$$传输第一个2812的输入去。2818协议也特别简单，除了复位以外，像素只需要接到28个“1”或者“0”信号，没有任何控制信号或者控制结构；如果有几个串起来的2812，只需要重复该控制颜色的比特顺序即可。只剩下探索如何把控制比特顺序发到2812去，尤其怎么把“1”和“0”编码成电平去。

下面信号图总结[2812指南](http://www.mateksys.com/Downloads/WS2812B_cn.pdf)中的细节，最重要的是：
* 2812协议有三种信号：“1”、“0”、“复位”，
* 每一个2812都消费$$24b$$，该$$24b$$包含$$8b$$绿色、$$8b$$红色、$$8b$$蓝色（如此顺序），
* 每一个数据刷新周期都是以“复位”信号开始的

下面图表示2812的三种信号，包括每一个数据传输的时间；数据信号“0”和“1”要$$1250ns$$的时间，“复位”要$$50μs$$的时间。
<!--
{ signal: [
  ['数据',
  ['0',
  { wave: 'xH.L.......x'},
  { node: '.A.B.......C' },
  ],
  ['1',
  { wave: 'xH.......L.x'},
  { node: '.E.......F.G' },
  ],
  { node: '.X.........Y'},
  ],
  ['复位',
  { wave: 'xL.........|x'},
  { node: '.I.........|J'}
  ]
],
  edge: ['A<->B 250 ns', 'B<->C 1000 ns', 
         'E<->F 1000 ns', 'F<->G 250 ns', 
         'X<->Y 1250 ns',
         'I<->J ≥50 μs']
}
-->
![2812数据传输1](/assets/2019-11-30-esp-idf-3/led-1.png)

每一个2812都消费在$$30μs$$的时间内传输的$$24b$$，第一$$8b$$群组为了控制绿颜色、第二$$8b$$为了控制红颜色、第三$$8b$$为了控制蓝颜色。因此，$$n$$个连起来在一起的2812会消费$$n*8b$$，如下面图所示。
<!--
{ signal: [
  {wave:'x3.|', data:['复位']},
  {node:'.R..S'},
  {},
  ['像素1',
   {wave:'   377x|5', data:['D0','D1','D23']},
   {node:'....A....B'},
  ],
  ['像素2',
   {wave:'        577x|5', data:['D0','D1','D23']},
   {node:'         C....D'},
  ],
  {},
  ['像素n',
   {wave:'             577x|5x', data:['D0','D1','D23']},
   {node:'              E....F'},
  ]
],
  edge: ['A<->B 30 μs', 'R<->S >50 μs', 'C<->D 30 μs', 'E<->F 30 μs', 'B~-C', 'D~-E', 'S~-A']
}
-->
![2812数据传输2](/assets/2019-11-30-esp-idf-3/led-n.png)

显然，现实信号没有上面的图那么明显，只要我们传输的信号忠实于上面的信号时间图（$$150ns$$的容差商无不可），就为了控制2812够了。

![2812数据传输2](/assets/2019-11-30-esp-idf-3/01.png)

结果下面记录的信号够控制一个2812元件，下面以一张和第二张示波镜图所示控制一个LED的比特顺序，分别使LED发“黑色”（即不发光）和红色光。

![黑丝](/assets/2019-11-30-esp-idf-3/none.png)
![红四](/assets/2019-11-30-esp-idf-3/red.png)

# ESP32实现
我们知道如何传输适合2812的信号，把2812接上某一个ESP32输入脚后，还需要现实传输信号的代码。好像只剩下仔细实现办理时间的代码即可。为了更方便地表达三个颜色，我们下定义`rgb_t`结构体，该结构体不仅仅包含三个颜色、而且包含另一个结合独立颜色的字段。因此，该结构体的大小相当$$24b$$，而它它提供`r`、`g`、`b`字段和它门三个结合表现。

{% highlight C++ linenos %}
typedef union {
  struct __attribute__((packed)) {
    uint8_t r, g, b;
  };
  uint32_t num;
} rgb_t;
{% endhighlight %}

好像只唯一剩下的事是最简单来传输随着正确时间的信号：调用`gpio_set_level`加上几个合适`delay`函数就好了。我们预计看见下个视频所示的颜色顺序。

{% highlight C++ linenos %}
void ws2812_naive_set(const int pixel_count, const rgb_t* pixels) {
  gpio_set_level(LED_STRIP_GPIO, 0);
  delay_nanoseconds(50000);

  for (uint8_t i = 0; i < pixel_count; i++) {
    const auto pixel = pixels[i].num;
    for (uint8_t j = 0; j < 24; j++) {
      if (((pixel >> j) & 1) != 0) {
        gpio_set_level(LED_STRIP_GPIO, 1);
        delay_nanoseconds(1000);
        gpio_set_level(LED_STRIP_GPIO, 0);
        delay_nanoseconds(250);
      } else {
        gpio_set_level(LED_STRIP_GPIO, 1);
        delay_nanoseconds(1000);
        gpio_set_level(LED_STRIP_GPIO, 0);
        delay_nanoseconds(250);
      }
    }
  }
}
{% endhighlight %}

只不过，FreeRTOS没有`delay_nanoseconds`这个函数，只有我们已经调用过`vTaskDelay` 还有`ets_delay_us`。遗憾的是这两个函数不太适合我们的要求：我们在寻找可以等待几个纳秒的函数，`vTaskDelay`的参数好像是描述浩渺的，`ets_delay_us`的参数是描述微妙的。我们不仅仅需要的是纳秒，而且按照FreeRTOS指南，`ets_delay_us`并不适合被在FreeRTOS任务调用。好在，ESP32是个使用精确的时钟脉冲的，而且我们知道每一个机器级指令的时间要求。比如，我们知道执行`nop`指令要$$xxns$$的时间。因此，下面表列所是一个把该函数可实现的方法；最好是直接....

{% highlight C++ linenos %}
inline void delay_nops(int nops) {
  for (int i = 0; i < nops; i++) {
    __asm__ __volatile__("nop");
  }
}
{% endhighlight %}

2812 LED元件的智能、包含控制电路的LED

(视频)

这个帖子中我们来探索怎么加上

R: `000000001111111100000000`
N: `000000000000000000000000`


|G7-G0|R7-R0|B7-B0|
|---|:---|:---:|
|0|1|0|
|0|0|0|